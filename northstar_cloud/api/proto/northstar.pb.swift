// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: northstar.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum NorthstarCloud_FileType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case jpeg // = 1
  case png // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .jpeg
    case 2: self = .png
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .jpeg: return 1
    case .png: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct NorthstarCloud_UploadImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageID: String {
    get {return _storage._imageID}
    set {_uniqueStorage()._imageID = newValue}
  }

  var imageName: String {
    get {return _storage._imageName}
    set {_uniqueStorage()._imageName = newValue}
  }

  var imageFormat: NorthstarCloud_FileType {
    get {return _storage._imageFormat}
    set {_uniqueStorage()._imageFormat = newValue}
  }

  var image: Data {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  var user: NorthstarCloud_User {
    get {return _storage._user ?? NorthstarCloud_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct NorthstarCloud_UploadImageReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_LatLng {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The latitude in degrees. It must be in the range [-90.0, +90.0].
  var latitude: Double = 0

  /// The longitude in degrees. It must be in the range [-180.0, +180.0].
  var longitude: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_HealthInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var needMedicalSupport: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  var userName: String {
    get {return _storage._userName}
    set {_uniqueStorage()._userName = newValue}
  }

  var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  var phoneNumber: String {
    get {return _storage._phoneNumber}
    set {_uniqueStorage()._phoneNumber = newValue}
  }

  var homeAddress: String {
    get {return _storage._homeAddress}
    set {_uniqueStorage()._homeAddress = newValue}
  }

  var emailAddress: String {
    get {return _storage._emailAddress}
    set {_uniqueStorage()._emailAddress = newValue}
  }

  var officeAddress: String {
    get {return _storage._officeAddress}
    set {_uniqueStorage()._officeAddress = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var appType: String {
    get {return _storage._appType}
    set {_uniqueStorage()._appType = newValue}
  }

  var lastUpdated: String {
    get {return _storage._lastUpdated}
    set {_uniqueStorage()._lastUpdated = newValue}
  }

  var createdAt: String {
    get {return _storage._createdAt}
    set {_uniqueStorage()._createdAt = newValue}
  }

  var currentLocation: NorthstarCloud_LatLng {
    get {return _storage._currentLocation ?? NorthstarCloud_LatLng()}
    set {_uniqueStorage()._currentLocation = newValue}
  }
  /// Returns true if `currentLocation` has been explicitly set.
  var hasCurrentLocation: Bool {return _storage._currentLocation != nil}
  /// Clears the value of `currentLocation`. Subsequent reads from it will return its default value.
  mutating func clearCurrentLocation() {_storage._currentLocation = nil}

  var healthInfo: NorthstarCloud_HealthInfo {
    get {return _storage._healthInfo ?? NorthstarCloud_HealthInfo()}
    set {_uniqueStorage()._healthInfo = newValue}
  }
  /// Returns true if `healthInfo` has been explicitly set.
  var hasHealthInfo: Bool {return _storage._healthInfo != nil}
  /// Clears the value of `healthInfo`. Subsequent reads from it will return its default value.
  mutating func clearHealthInfo() {_storage._healthInfo = nil}

  var rescueLocations: [NorthstarCloud_LatLng] {
    get {return _storage._rescueLocations}
    set {_uniqueStorage()._rescueLocations = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct NorthstarCloud_AddUserRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: NorthstarCloud_User {
    get {return _storage._user ?? NorthstarCloud_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct NorthstarCloud_AddUserReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_GetUserRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String = String()

  var userName: String = String()

  var appID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_GetUserReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: NorthstarCloud_User {
    get {return _storage._user ?? NorthstarCloud_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct NorthstarCloud_GetUserRescuePointsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var user: NorthstarCloud_User {
    get {return _storage._user ?? NorthstarCloud_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct NorthstarCloud_GetUserRescuePointsReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rescueLocations: [NorthstarCloud_LatLng] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_GetImageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageID: String = String()

  var imageName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NorthstarCloud_GetImageReply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imageID: String {
    get {return _storage._imageID}
    set {_uniqueStorage()._imageID = newValue}
  }

  var imageName: String {
    get {return _storage._imageName}
    set {_uniqueStorage()._imageName = newValue}
  }

  var imageFormat: NorthstarCloud_FileType {
    get {return _storage._imageFormat}
    set {_uniqueStorage()._imageFormat = newValue}
  }

  var image: Data {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  var user: NorthstarCloud_User {
    get {return _storage._user ?? NorthstarCloud_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_storage._user = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "northstar_cloud"

extension NorthstarCloud_FileType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "JPEG"),
    2: .same(proto: "PNG"),
  ]
}

extension NorthstarCloud_UploadImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadImageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_id"),
    2: .standard(proto: "image_name"),
    3: .standard(proto: "image_format"),
    4: .same(proto: "image"),
    5: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _imageID: String = String()
    var _imageName: String = String()
    var _imageFormat: NorthstarCloud_FileType = .unknown
    var _image: Data = SwiftProtobuf.Internal.emptyData
    var _user: NorthstarCloud_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imageID = source._imageID
      _imageName = source._imageName
      _imageFormat = source._imageFormat
      _image = source._image
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._imageID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._imageName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._imageFormat)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._image)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._imageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageID, fieldNumber: 1)
      }
      if !_storage._imageName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageName, fieldNumber: 2)
      }
      if _storage._imageFormat != .unknown {
        try visitor.visitSingularEnumField(value: _storage._imageFormat, fieldNumber: 3)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._image, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_UploadImageRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._imageID != other_storage._imageID {return false}
        if _storage._imageName != other_storage._imageName {return false}
        if _storage._imageFormat != other_storage._imageFormat {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_UploadImageReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UploadImageReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.success)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_UploadImageReply) -> Bool {
    if self.success != other.success {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_LatLng: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LatLng"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "latitude"),
    2: .same(proto: "longitude"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.latitude)
      case 2: try decoder.decodeSingularDoubleField(value: &self.longitude)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.latitude != 0 {
      try visitor.visitSingularDoubleField(value: self.latitude, fieldNumber: 1)
    }
    if self.longitude != 0 {
      try visitor.visitSingularDoubleField(value: self.longitude, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_LatLng) -> Bool {
    if self.latitude != other.latitude {return false}
    if self.longitude != other.longitude {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_HealthInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HealthInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "need_medical_support"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.needMedicalSupport)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.needMedicalSupport != false {
      try visitor.visitSingularBoolField(value: self.needMedicalSupport, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_HealthInfo) -> Bool {
    if self.needMedicalSupport != other.needMedicalSupport {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".User"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_name"),
    3: .standard(proto: "first_name"),
    4: .standard(proto: "last_name"),
    5: .standard(proto: "phone_number"),
    6: .standard(proto: "home_address"),
    7: .standard(proto: "email_address"),
    8: .standard(proto: "office_address"),
    9: .standard(proto: "app_id"),
    10: .standard(proto: "app_type"),
    11: .standard(proto: "last_updated"),
    12: .standard(proto: "created_at"),
    13: .standard(proto: "current_location"),
    14: .standard(proto: "health_info"),
    15: .standard(proto: "rescue_locations"),
  ]

  fileprivate class _StorageClass {
    var _userID: String = String()
    var _userName: String = String()
    var _firstName: String = String()
    var _lastName: String = String()
    var _phoneNumber: String = String()
    var _homeAddress: String = String()
    var _emailAddress: String = String()
    var _officeAddress: String = String()
    var _appID: String = String()
    var _appType: String = String()
    var _lastUpdated: String = String()
    var _createdAt: String = String()
    var _currentLocation: NorthstarCloud_LatLng? = nil
    var _healthInfo: NorthstarCloud_HealthInfo? = nil
    var _rescueLocations: [NorthstarCloud_LatLng] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _userName = source._userName
      _firstName = source._firstName
      _lastName = source._lastName
      _phoneNumber = source._phoneNumber
      _homeAddress = source._homeAddress
      _emailAddress = source._emailAddress
      _officeAddress = source._officeAddress
      _appID = source._appID
      _appType = source._appType
      _lastUpdated = source._lastUpdated
      _createdAt = source._createdAt
      _currentLocation = source._currentLocation
      _healthInfo = source._healthInfo
      _rescueLocations = source._rescueLocations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._userName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
        case 6: try decoder.decodeSingularStringField(value: &_storage._homeAddress)
        case 7: try decoder.decodeSingularStringField(value: &_storage._emailAddress)
        case 8: try decoder.decodeSingularStringField(value: &_storage._officeAddress)
        case 9: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._appType)
        case 11: try decoder.decodeSingularStringField(value: &_storage._lastUpdated)
        case 12: try decoder.decodeSingularStringField(value: &_storage._createdAt)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._currentLocation)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._healthInfo)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._rescueLocations)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 1)
      }
      if !_storage._userName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userName, fieldNumber: 2)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 3)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 4)
      }
      if !_storage._phoneNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phoneNumber, fieldNumber: 5)
      }
      if !_storage._homeAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._homeAddress, fieldNumber: 6)
      }
      if !_storage._emailAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._emailAddress, fieldNumber: 7)
      }
      if !_storage._officeAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._officeAddress, fieldNumber: 8)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 9)
      }
      if !_storage._appType.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appType, fieldNumber: 10)
      }
      if !_storage._lastUpdated.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastUpdated, fieldNumber: 11)
      }
      if !_storage._createdAt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createdAt, fieldNumber: 12)
      }
      if let v = _storage._currentLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._healthInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._rescueLocations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rescueLocations, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_User) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._userID != other_storage._userID {return false}
        if _storage._userName != other_storage._userName {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._phoneNumber != other_storage._phoneNumber {return false}
        if _storage._homeAddress != other_storage._homeAddress {return false}
        if _storage._emailAddress != other_storage._emailAddress {return false}
        if _storage._officeAddress != other_storage._officeAddress {return false}
        if _storage._appID != other_storage._appID {return false}
        if _storage._appType != other_storage._appType {return false}
        if _storage._lastUpdated != other_storage._lastUpdated {return false}
        if _storage._createdAt != other_storage._createdAt {return false}
        if _storage._currentLocation != other_storage._currentLocation {return false}
        if _storage._healthInfo != other_storage._healthInfo {return false}
        if _storage._rescueLocations != other_storage._rescueLocations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_AddUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddUserRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _user: NorthstarCloud_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_AddUserRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_AddUserReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddUserReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.success)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_AddUserReply) -> Bool {
    if self.success != other.success {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
    2: .standard(proto: "user_name"),
    3: .standard(proto: "app_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.userID)
      case 2: try decoder.decodeSingularStringField(value: &self.userName)
      case 3: try decoder.decodeSingularStringField(value: &self.appID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 1)
    }
    if !self.userName.isEmpty {
      try visitor.visitSingularStringField(value: self.userName, fieldNumber: 2)
    }
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetUserRequest) -> Bool {
    if self.userID != other.userID {return false}
    if self.userName != other.userName {return false}
    if self.appID != other.appID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetUserReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _user: NorthstarCloud_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetUserReply) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetUserRescuePointsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserRescuePointsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _user: NorthstarCloud_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetUserRescuePointsRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetUserRescuePointsReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetUserRescuePointsReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rescue_locations"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rescueLocations)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rescueLocations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rescueLocations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetUserRescuePointsReply) -> Bool {
    if self.rescueLocations != other.rescueLocations {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetImageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetImageRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_id"),
    2: .standard(proto: "image_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.imageID)
      case 2: try decoder.decodeSingularStringField(value: &self.imageName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 1)
    }
    if !self.imageName.isEmpty {
      try visitor.visitSingularStringField(value: self.imageName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetImageRequest) -> Bool {
    if self.imageID != other.imageID {return false}
    if self.imageName != other.imageName {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension NorthstarCloud_GetImageReply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetImageReply"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "image_id"),
    2: .standard(proto: "image_name"),
    3: .standard(proto: "image_format"),
    4: .same(proto: "image"),
    5: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _imageID: String = String()
    var _imageName: String = String()
    var _imageFormat: NorthstarCloud_FileType = .unknown
    var _image: Data = SwiftProtobuf.Internal.emptyData
    var _user: NorthstarCloud_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imageID = source._imageID
      _imageName = source._imageName
      _imageFormat = source._imageFormat
      _image = source._image
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._imageID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._imageName)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._imageFormat)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._image)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._imageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageID, fieldNumber: 1)
      }
      if !_storage._imageName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageName, fieldNumber: 2)
      }
      if _storage._imageFormat != .unknown {
        try visitor.visitSingularEnumField(value: _storage._imageFormat, fieldNumber: 3)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._image, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: NorthstarCloud_GetImageReply) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._imageID != other_storage._imageID {return false}
        if _storage._imageName != other_storage._imageName {return false}
        if _storage._imageFormat != other_storage._imageFormat {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._user != other_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
