# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import detective_api.api.proto.detective_pb2 as detective__pb2


class DetectiveServiceStub(object):
  """The `DetectiveService` provides APIs.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetWitnessMergeDecision = channel.unary_unary(
        '/detective.DetectiveService/GetWitnessMergeDecision',
        request_serializer=detective__pb2.GetWitnessMergeRequest.SerializeToString,
        response_deserializer=detective__pb2.GetWitnessMergeReply.FromString,
        )


class DetectiveServiceServicer(object):
  """The `DetectiveService` provides APIs.

  """

  def GetWitnessMergeDecision(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DetectiveServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetWitnessMergeDecision': grpc.unary_unary_rpc_method_handler(
          servicer.GetWitnessMergeDecision,
          request_deserializer=detective__pb2.GetWitnessMergeRequest.FromString,
          response_serializer=detective__pb2.GetWitnessMergeReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'detective.DetectiveService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
